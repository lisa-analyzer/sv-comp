# Standard library imports
from typing import List
from dataclasses import dataclass

# Project-local imports
from cli.models.lisa_report.fields.info import Info
from cli.models.lisa_report.fields.warning import Warning

@dataclass
class LisaReport:
    """
        Represents the 'report' JSON file generated by LiSA
    """

    # There are other fields (files, configuration, etc.) in the report. Add them up upon the need
    warnings: List[Warning]
    info: Info

    def __init__(self, warnings, info, **_):
        self.warnings = [Warning(**w) if isinstance(w, dict) else w for w in warnings]
        self.info = Info(**info)

    def has_warnings(self) -> bool:
        return self.info.warnings > 0

    def list_warnings(self) -> List[str]:
        return [w.extract_warning() for w in self.warnings]
    
    # assert specific
    
    def list_assert_warnings(self) -> List[str]:
        return [w.extract_warning() for w in self.warnings if w.is_assertion_warning()]

    def has_assert_warnings(self) -> bool:
        return len(self.list_assert_warnings()) > 0
    
    def has_only_definite_holds_assert_warning(self) -> bool:
        return all("assertion holds" in warning for warning in self.list_assert_warnings())
    
    def has_definite_holds_assert_warning(self) -> bool:
        return any("assertion holds" in warning for warning in self.list_assert_warnings())
    
    def has_only_possibly_not_holds_assert_warning(self) -> bool:
        return all("POSSIBLE" in warning for warning in self.list_assert_warnings())
    
    def has_possibly_not_holds_assert_warning(self) -> bool:
        return any("POSSIBLE" in warning for warning in self.list_assert_warnings())

    def has_only_definite_not_holds_assert_warning(self) -> bool:
        return all("assertion DOES NOT hold" in warning for warning in self.list_assert_warnings())

    def has_definite_not_holds_assert_warning(self) -> bool:
        return any("assertion DOES NOT hold" in warning for warning in self.list_assert_warnings())

    # runtime specific

    def list_runtime_warnings(self) -> List[str]:
        return [w.extract_warning() for w in self.warnings if w.is_runtime_warning()]
    
    def has_runtime_warnings(self) -> bool:
        return len(self.list_runtime_warnings()) > 0

    def has_only_possibly_not_holds_runtime_warning(self) -> bool:
        return all("POSSIBLE" in warning for warning in self.list_runtime_warnings())

    def has_possibly_not_holds_runtime_warning(self) -> bool:
        return any("POSSIBLE" in warning for warning in self.list_runtime_warnings())

    def has_only_definite_not_holds_runtime_warning(self) -> bool:
        return all("DEFINITE" in warning for warning in self.list_runtime_warnings())

    def has_definite_not_holds_runtime_warning(self) -> bool:
        return any("DEFINITE" in warning for warning in self.list_runtime_warnings())


    

    

    

    
